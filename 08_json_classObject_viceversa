Also note that it can be converted as a string and the same can be used...as it is done in nanourl code

ObjectMapper objectMapper = new ObjectMapper();
String requestBody = null;
try {
      requestBody = objectMapper.writeValueAsString(nanoUrlRequest);
    } 
    catch (JsonProcessingException e)
    {
      e.printStackTrace();
    }


Here instead of a file, it is converted to a string. The above will work if there is only 1 json string

Incase of multiple jsonStrings

Add Gson dependency to maven

Using Gson u can convert a java object to string and then use JSONArray to convert the list of strings  and then pass the same to JSONObject

here \ will come in the json string, as this string involves lot of "", before which a \ will be there...So in order to avoid it we use apache common text api to fix this issue

Gson is used to convert java object to json this will be helpful in the case of multiple json into a single one....for other scenario you can just use Object mapper
as well to convert the java object to json.

For using mulitple json into one, use JSONArray and use the same in JSONOBject. refer code 

String escape utils will help you to sort out the \ issue in json string that is created. and the created new string will have an extra " before and after {}
so in order to avoid it use string.replace(ols,new)

this simple fix will sort out the issue.



ObjectMapper om = new ObjectMapper();
om.readValue();

this is used to convert json to java object.

Below is a simple example of converting a JSON String to a Java object using the ObjectMapper class:

String json = "{ \"color\" : \"Black\", \"type\" : \"BMW\" }";
Car car = objectMapper.readValue(json, Car.class);  
The readValue() function also accepts other forms of input like a file containing JSON string:


Car car = objectMapper.readValue(new File("src/test/resources/json_car.json"), Car.class);
or a URL:

Car car = 
  objectMapper.readValue(new URL("file:src/test/resources/json_car.json"), Car.class);